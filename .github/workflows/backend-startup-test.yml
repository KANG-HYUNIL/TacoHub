# 백엔드 API 서버 기동 테스트 워크플로우 (Java 21)
# 목적: Docker Compose로 전체 환경을 구성하고 Spring Boot 서버가 정상적으로 기동되는지 확인
name: Backend API Server Startup Test

# 워크플로우 실행 조건 설정
on:
  # 코드가 main 또는 dev 브랜치에 푸시될 때 실행
  push:
    branches: [ dev ]
    # 백엔드 코드가 변경되었을 때만 실행 (효율성을 위해)
    paths:
      - 'BackEnd/**'
      - '.github/workflows/backend-startup-test.yml'
  
  # Pull Request가 main 브랜치로 생성될 때 실행
  pull_request:
    branches: [ main ]
    paths:
      - 'BackEnd/**'
      - '.github/workflows/backend-startup-test.yml'
  
  # 수동으로 워크플로우를 실행할 수 있도록 설정
  workflow_dispatch:

# 작업 정의
jobs:
  # 서버 기동 테스트 작업
  startup-test:
    # GitHub의 최신 Ubuntu 환경에서 실행
    runs-on: ubuntu-latest
    
    # 작업 실행 단계들
    steps:
    # 1단계: 저장소 코드를 GitHub Actions 실행 환경으로 다운로드
    - name: 📥 코드 체크아웃
      uses: actions/checkout@v4
      
    # 2단계: Java 21 개발 환경 설정 (LTS 버전)
    - name: ☕ Java 21 설정
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'  # Eclipse Temurin JDK 21 사용
        # Java 21의 새로운 기능들을 활용하기 위한 설정
        check-latest: true
        
    # 3단계: Gradle 의존성 캐싱 (빌드 속도 향상)
    - name: 📦 Gradle 의존성 캐시
      uses: actions/cache@v4
      with:
        # 캐시할 Gradle 폴더들
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        # 캐시 키: build.gradle 파일들이 변경되면 새로운 캐시 생성
        key: ${{ runner.os }}-gradle-java21-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        # 캐시가 없을 때 사용할 백업 키
        restore-keys: |
          ${{ runner.os }}-gradle-java21-
          ${{ runner.os }}-gradle-

    # 4단계: Docker Compose로 모든 의존성 서비스 시작
    - name: 🐳 Docker Compose 서비스 시작
      run: |
        # 백엔드 프로젝트 폴더로 이동
        cd BackEnd/TacoHub
        
        # Docker Compose를 백그라운드에서 실행 (-d 옵션)
        # 모든 서비스(MySQL, MongoDB, Redis, RabbitMQ, LocalStack) 시작
        docker-compose -f compose.yaml up -d
        
        # 실행된 컨테이너 상태 확인 (디버깅용)
        echo "🔍 실행 중인 컨테이너 확인:"
        docker ps
        
    # 5단계: 의존성 서비스들이 완전히 준비될 때까지 대기
    - name: ⏳ 서비스 준비 상태 확인
      run: |
        cd BackEnd/TacoHub
        
        echo "⏱️ MySQL 서비스 준비 대기 중..."
        # MySQL이 준비될 때까지 최대 60초 대기
        timeout 60s bash -c 'until docker-compose exec -T mysql mysqladmin ping -h localhost --silent; do sleep 2; done'
        
        echo "⏱️ MongoDB 서비스 준비 대기 중..."
        # MongoDB가 준비될 때까지 최대 60초 대기
        timeout 60s bash -c 'until docker-compose exec -T mongodb mongosh --eval "db.adminCommand(\"ping\")" --quiet; do sleep 2; done'
        
        echo "⏱️ Redis 서비스 준비 대기 중..."
        # Redis가 준비될 때까지 최대 30초 대기
        timeout 30s bash -c 'until docker-compose exec -T redis redis-cli ping | grep -q PONG; do sleep 2; done'
        
        echo "⏱️ RabbitMQ 서비스 준비 대기 중..."
        # RabbitMQ가 준비될 때까지 최대 60초 대기
        timeout 60s bash -c 'until docker-compose exec -T rabbitmq rabbitmqctl status > /dev/null 2>&1; do sleep 2; done'
        
        echo "✅ 모든 서비스가 준비되었습니다!"

    # 6단계: Gradle로 Spring Boot 애플리케이션 빌드 (테스트 제외)
    - name: 🔨 애플리케이션 빌드
      run: |
        cd BackEnd/TacoHub
        
        # 권한 설정 (Linux에서 gradlew 실행을 위해)
        chmod +x ./gradlew
        
        # 테스트를 제외하고 빌드만 수행 (-x test)
        echo "🔨 애플리케이션 빌드 시작..."
        ./gradlew build -x test
        
        echo "✅ 빌드 완료!"


    # 7단계: Spring Boot 서버 기동 테스트
    - name: 🚀 Spring Boot 서버 기동 테스트
      run: |
        cd BackEnd/TacoHub
        
        echo "🚀 Spring Boot 서버 시작 중..."
        
        # Spring Boot 애플리케이션을 백그라운드에서 시작
        # local 프로파일 사용, 로그는 app.log 파일에 저장
        # Java 21의 새로운 JVM 옵션들 적용
        nohup java -jar \
          -Dspring.profiles.active=local \
          --enable-preview \
          -XX:+UseZGC \
          -XX:+UnlockExperimentalVMOptions \
          -Xmx2g \
          -Xms1g \
          build/libs/*.jar > app.log 2>&1 &
        
        # 프로세스 ID 저장 (나중에 종료하기 위해)
        APP_PID=$!
        echo $APP_PID > app.pid
        
        echo "📋 서버 PID: $APP_PID"
        
        # 서버가 시작될 때까지 대기 (최대 120초)
        echo "⏳ 서버 시작 대기 중..."
        timeout 120s bash -c '
          until curl -f http://localhost:5000/actuator/health > /dev/null 2>&1; do
            echo "⏱️ 서버 응답 대기 중... ($(date))"
            sleep 5
          done
        ' || {
          # 타임아웃 시 로그 출력
          echo "❌ 서버 시작 타임아웃! 로그 확인:"
          tail -50 app.log
          exit 1
        }
        
        echo "✅ 서버가 성공적으로 시작되었습니다!"
        
        # 헬스 체크 엔드포인트 테스트
        echo "🏥 헬스 체크 수행 중..."
        curl -f http://localhost:5000/api/actuator/health
        

        # 서버 종료
        echo "🛑 서버 종료 중..."
        kill $APP_PID
        
        # 서버 로그 출력 (디버깅용)
        echo "📄 서버 시작 로그:"
        head -30 app.log
      
      # 환경 변수 설정
      env:
        # Spring Boot 프로파일을 local로 설정
        SPRING_PROFILES_ACTIVE: local
        # Java 21의 Virtual Threads 및 새로운 기능 활성화
        JAVA_TOOL_OPTIONS: "--enable-preview -XX:+UseZGC"

    # 8단계: 정리 작업 (항상 실행)
    - name: 🧹 리소스 정리
      if: always()  # 테스트 성공/실패와 관계없이 항상 실행
      run: |
        cd BackEnd/TacoHub
        
        echo "🧹 Docker 컨테이너 정리 중..."
        # 모든 컨테이너 중지 및 제거, 볼륨도 삭제
        docker-compose -f compose.yaml down -v
        
        # 사용하지 않는 Docker 이미지 정리
        docker system prune -f
        
        echo "✅ 정리 완료!"

    # 9단계: 테스트 결과 업로드 (실패 시 디버깅용)
    - name: 📤 로그 업로드
      if: failure()  # 테스트가 실패했을 때만 실행
      uses: actions/upload-artifact@v4
      with:
        name: startup-test-logs-java21
        path: |
          BackEnd/TacoHub/app.log
          BackEnd/TacoHub/logs/
        retention-days: 7  # 7일간 보관
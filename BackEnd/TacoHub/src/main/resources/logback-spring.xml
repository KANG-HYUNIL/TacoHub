<?xml version="1.0" encoding="UTF-8"?>
<configuration>
    
    <!-- 환경별 프로파일 설정 -->
    <springProfile name="local">
        <!-- Local 환경: 콘솔 + 파일 -->
        <property name="LOG_LEVEL" value="DEBUG"/>
        <property name="LOG_PATH" value="logs"/>
    </springProfile>
    
    <springProfile name="test">
        <!-- Test 환경: 파일 + CloudWatch (ERROR만) -->
        <property name="LOG_LEVEL" value="INFO"/>
        <property name="LOG_PATH" value="logs"/>
    </springProfile>
    
    <springProfile name="prod">
        <!-- 운영 환경: CloudWatch + S3 (모든 레벨) -->
        <property name="LOG_LEVEL" value="INFO"/>
        <property name="LOG_PATH" value="/var/log/tacohub"/>
    </springProfile>

    <!-- 패턴 정의 -->
    <property name="CONSOLE_PATTERN" 
              value="%d{HH:mm:ss.SSS} [%thread] %highlight(%-5level) %cyan(%logger{36}) - %msg%n"/>
    
    <!-- JSON 패턴 (CloudWatch용) -->
    <property name="JSON_PATTERN" 
              value='{"timestamp":"%d{ISO8601}","level":"%level","thread":"%thread","logger":"%logger","message":"%message","trace_id":"%X{traceId:-}","user_id":"%X{userId:-}"}%n'/>

    <!-- 콘솔 Appender (개발용) -->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>${CONSOLE_PATTERN}</pattern>
        </encoder>
    </appender>

    <!-- 파일 Appender (일반 로그) -->
    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_PATH}/application.log</file>
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n</pattern>
        </encoder>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_PATH}/application.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <maxFileSize>100MB</maxFileSize>
            <maxHistory>30</maxHistory>
            <totalSizeCap>3GB</totalSizeCap>
        </rollingPolicy>
    </appender>

    <!-- 감사 로그 전용 Appender -->
    <appender name="AUDIT_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_PATH}/audit/audit.log</file>
        <encoder class="net.logstash.logback.encoder.LogstashEncoder">
            <!-- JSON 형태로 구조화된 로그 -->
        </encoder>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_PATH}/audit/audit.%d{yyyy-MM-dd}.log</fileNamePattern>
            <maxHistory>90</maxHistory>
        </rollingPolicy>
    </appender>

    <!-- 에러 로그 전용 Appender -->
    <appender name="ERROR_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_PATH}/error.log</file>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n%ex</pattern>
        </encoder>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_PATH}/error.%d{yyyy-MM-dd}.log</fileNamePattern>
            <maxHistory>90</maxHistory>
        </rollingPolicy>
    </appender>

    <!-- S3 Error Log Appender (Test/Prod 환경에서만) -->
    <springProfile name="test,prod">
        <appender name="S3_ERROR_LOG" class="ch.qos.logback.core.rolling.RollingFileAppender">
            <file>${LOG_PATH}/s3-error/error.log</file>
            <filter class="ch.qos.logback.classic.filter.LevelFilter">
                <level>ERROR</level>
                <onMatch>ACCEPT</onMatch>
                <onMismatch>DENY</onMismatch>
            </filter>
            <encoder class="net.logstash.logback.encoder.LogstashEncoder">
                <!-- JSON 형태로 구조화된 에러 로그 -->
                <includeContext>true</includeContext>
                <includeMdc>true</includeMdc>
                <customFields>{"service":"tacohub","log_type":"error"}</customFields>
            </encoder>
            <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                <fileNamePattern>${LOG_PATH}/s3-error/error.%d{yyyy-MM-dd}.log</fileNamePattern>
                <maxHistory>180</maxHistory>
                <totalSizeCap>10GB</totalSizeCap>
            </rollingPolicy>

        </appender>
    </springProfile>

    <!-- CloudWatch Appender (Test/Prod 환경) -->
    
    <!-- Test 환경: ERROR/WARN을 각각 별도 CloudWatch 로그 그룹으로 전송 -->
    <springProfile name="test">
        <!-- ERROR 전용 CloudWatch Appender -->
        <appender name="CLOUDWATCH_ERROR_TEST" class="ca.pjer.logback.AwsLogsAppender">
            <layout>
                <pattern>${JSON_PATTERN}</pattern>
            </layout>
            <logGroupName>${AWS_CLOUDWATCH_LOG_GROUP_ERROR_TEST:-/aws/ec2/tacohub-test-error}</logGroupName>
            <logStreamUuidPrefix>test-error-</logStreamUuidPrefix>
            <logRegion>${AWS_REGION:-ap-northeast-2}</logRegion>
            <maxBatchLogEvents>${AWS_CLOUDWATCH_BATCH_SIZE_ERROR_TEST:-50}</maxBatchLogEvents>
            <maxFlushTimeMillis>${AWS_CLOUDWATCH_FLUSH_TIME_ERROR_TEST:-5000}</maxFlushTimeMillis>
            <maxBlockTimeMillis>${AWS_CLOUDWATCH_BLOCK_TIME_ERROR_TEST:-1000}</maxBlockTimeMillis>
            
            <!-- ERROR 레벨만 필터링 -->
            <filter class="ch.qos.logback.classic.filter.LevelFilter">
                <level>ERROR</level>
                <onMatch>ACCEPT</onMatch>
                <onMismatch>DENY</onMismatch>
            </filter>
        </appender>
        
        <!-- INFO/WARN 전용 CloudWatch Appender -->
        <appender name="CLOUDWATCH_INFO_TEST" class="ca.pjer.logback.AwsLogsAppender">
            <layout>
                <pattern>${JSON_PATTERN}</pattern>
            </layout>
            <logGroupName>${AWS_CLOUDWATCH_LOG_GROUP_INFO_TEST:-/aws/ec2/tacohub-test-info}</logGroupName>
            <logStreamUuidPrefix>test-info-</logStreamUuidPrefix>
            <logRegion>${AWS_REGION:-ap-northeast-2}</logRegion>
            <maxBatchLogEvents>${AWS_CLOUDWATCH_BATCH_SIZE_INFO_TEST:-200}</maxBatchLogEvents>
            <maxFlushTimeMillis>${AWS_CLOUDWATCH_FLUSH_TIME_INFO_TEST:-15000}</maxFlushTimeMillis>
            <maxBlockTimeMillis>${AWS_CLOUDWATCH_BLOCK_TIME_INFO_TEST:-2000}</maxBlockTimeMillis>
            
            <!-- INFO, WARN 레벨만 필터링 (ERROR는 제외) -->
            <filter class="ch.qos.logback.classic.filter.LevelFilter">
                <level>ERROR</level>
                <onMatch>DENY</onMatch>
                <onMismatch>NEUTRAL</onMismatch>
            </filter>
            <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
                <level>INFO</level>
            </filter>
        </appender>
    </springProfile>
    
    <!-- Prod 환경: ERROR와 INFO/WARN을 각각 별도 CloudWatch 로그 그룹으로 전송 -->
    <springProfile name="prod">
        <!-- ERROR 전용 CloudWatch Appender -->
        <appender name="CLOUDWATCH_ERROR_PROD" class="ca.pjer.logback.AwsLogsAppender">
            <layout>
                <pattern>${JSON_PATTERN}</pattern>
            </layout>
            <logGroupName>${AWS_CLOUDWATCH_LOG_GROUP_ERROR_PROD:-/aws/ec2/tacohub-prod-error}</logGroupName>
            <logStreamUuidPrefix>prod-error-</logStreamUuidPrefix>
            <logRegion>${AWS_REGION:-ap-northeast-2}</logRegion>
            <maxBatchLogEvents>${AWS_CLOUDWATCH_BATCH_SIZE_ERROR_PROD:-100}</maxBatchLogEvents>
            <maxFlushTimeMillis>${AWS_CLOUDWATCH_FLUSH_TIME_ERROR_PROD:-5000}</maxFlushTimeMillis>
            <maxBlockTimeMillis>${AWS_CLOUDWATCH_BLOCK_TIME_ERROR_PROD:-1000}</maxBlockTimeMillis>
            
            <!-- ERROR 레벨만 필터링 -->
            <filter class="ch.qos.logback.classic.filter.LevelFilter">
                <level>ERROR</level>
                <onMatch>ACCEPT</onMatch>
                <onMismatch>DENY</onMismatch>
            </filter>
        </appender>
        
        <!-- INFO/WARN 전용 CloudWatch Appender -->
        <appender name="CLOUDWATCH_INFO_PROD" class="ca.pjer.logback.AwsLogsAppender">
            <layout>
                <pattern>${JSON_PATTERN}</pattern>
            </layout>
            <logGroupName>${AWS_CLOUDWATCH_LOG_GROUP_INFO_PROD:-/aws/ec2/tacohub-prod-info}</logGroupName>
            <logStreamUuidPrefix>prod-info-</logStreamUuidPrefix>
            <logRegion>${AWS_REGION:-ap-northeast-2}</logRegion>
            <maxBatchLogEvents>${AWS_CLOUDWATCH_BATCH_SIZE_INFO_PROD:-500}</maxBatchLogEvents>
            <maxFlushTimeMillis>${AWS_CLOUDWATCH_FLUSH_TIME_INFO_PROD:-30000}</maxFlushTimeMillis>
            <maxBlockTimeMillis>${AWS_CLOUDWATCH_BLOCK_TIME_INFO_PROD:-5000}</maxBlockTimeMillis>
            
            <!-- INFO, WARN 레벨만 필터링 (ERROR는 제외) -->
            <filter class="ch.qos.logback.classic.filter.LevelFilter">
                <level>ERROR</level>
                <onMatch>DENY</onMatch>
                <onMismatch>NEUTRAL</onMismatch>
            </filter>
            <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
                <level>INFO</level>
            </filter>
        </appender>
    </springProfile>

    <!-- 비동기 Appender (성능 최적화) -->
    <appender name="ASYNC_FILE" class="ch.qos.logback.classic.AsyncAppender">
        <appender-ref ref="FILE"/>
        <queueSize>256</queueSize>
        <discardingThreshold>0</discardingThreshold>
        <includeCallerData>false</includeCallerData>
    </appender>

    <appender name="ASYNC_AUDIT" class="ch.qos.logback.classic.AsyncAppender">
        <appender-ref ref="AUDIT_FILE"/>
        <queueSize>256</queueSize>
        <discardingThreshold>0</discardingThreshold>
    </appender>

    <!-- Logger 설정 -->
    
    <!-- 감사 로그 전용 Logger (환경별 분기) -->
    <logger name="AUDIT" level="INFO" additivity="false">
        <appender-ref ref="ASYNC_AUDIT"/>
        
        <!-- Test 환경: ERROR는 CloudWatch + S3, 나머지는 CloudWatch -->
        <springProfile name="test">
            <appender-ref ref="CLOUDWATCH_ERROR_TEST"/>
            <appender-ref ref="CLOUDWATCH_INFO_TEST"/>
            <appender-ref ref="S3_ERROR_LOG"/>
        </springProfile>
        
        <!-- Prod 환경: ERROR는 CloudWatch + S3, 나머지는 CloudWatch -->
        <springProfile name="prod">
            <appender-ref ref="CLOUDWATCH_ERROR_PROD"/>
            <appender-ref ref="CLOUDWATCH_INFO_PROD"/>
            <appender-ref ref="S3_ERROR_LOG"/>
        </springProfile>
    </logger>

    <!-- AOP 로깅 -->
    <logger name="com.example.TacoHub.Logging" level="DEBUG"/>
    
    <!-- Spring 관련 로그 레벨 조정 -->
    <logger name="org.springframework" level="INFO"/>
    <logger name="org.springframework.security" level="INFO"/>
    <logger name="org.springframework.web" level="INFO"/>
    
    <!-- 데이터베이스 관련 (개발환경만) -->
    <springProfile name="local,test">
        <logger name="org.hibernate.SQL" level="DEBUG"/>
        <logger name="org.hibernate.type.descriptor.sql.BasicBinder" level="TRACE"/>
    </springProfile>

    <!-- Root Logger (환경별 분기) -->
    <root level="${LOG_LEVEL}">
        <!-- Local 환경: Console + File -->
        <springProfile name="local">
            <appender-ref ref="CONSOLE"/>
            <appender-ref ref="ASYNC_FILE"/>
        </springProfile>
        
        <!-- Test 환경: File + CloudWatch(레벨별 분리) + S3(ERROR) -->
        <springProfile name="test">
            <appender-ref ref="ASYNC_FILE"/>
            <appender-ref ref="ERROR_FILE"/>
            <appender-ref ref="CLOUDWATCH_ERROR_TEST"/>
            <appender-ref ref="CLOUDWATCH_INFO_TEST"/>
            <appender-ref ref="S3_ERROR_LOG"/>
        </springProfile>
        
        <!-- Prod 환경: File + CloudWatch(레벨별 분리) + S3(ERROR) -->
        <springProfile name="prod">
            <appender-ref ref="ASYNC_FILE"/>
            <appender-ref ref="ERROR_FILE"/>
            <appender-ref ref="CLOUDWATCH_ERROR_PROD"/>
            <appender-ref ref="CLOUDWATCH_INFO_PROD"/>
            <appender-ref ref="S3_ERROR_LOG"/>
        </springProfile>
    </root>

</configuration>

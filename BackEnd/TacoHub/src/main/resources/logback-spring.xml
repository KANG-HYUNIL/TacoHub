<?xml version="1.0" encoding="UTF-8"?>
<configuration>
    
    <!-- 환경별 프로파일 설정 -->
    <springProfile name="local">
        <logger name="AUDIT" level="INFO" additivity="false">
            <appender-ref ref="ASYNC_AUDIT"/>  <!-- 감사 로그 전용 비동기 Appender -->
        </logger>

        <root level="${LOG_LEVEL}">

            <appender-ref ref="CONSOLE"/>
            <appender-ref ref="ASYNC_FILE"/>
        </root>

    </springProfile>


    <springProfile name="test">
        <logger name="AUDIT" level="INFO" additivity="false">
            <appender-ref ref="CLOUDWATCH_AUDIT_TEST"/>   <!-- 감사 로그 전용 CloudWatch -->
        </logger>
        <root level="${LOG_LEVEL}">
            <appender-ref ref="ASYNC_FILE"/>
            <appender-ref ref="ERROR_FILE"/>
            <appender-ref ref="CLOUDWATCH_ERROR_TEST"/>
            <appender-ref ref="CLOUDWATCH_INFO_TEST"/>
            <appender-ref ref="CLOUDWATCH_APPLICATION_TEST"/>
        </root>


    </springProfile>


    <springProfile name="prod">
        <logger name="AUDIT" level="INFO" additivity="false">
            <appender-ref ref="CLOUDWATCH_AUDIT_PROD"/>   <!-- 감사 로그 전용 CloudWatch -->
        </logger>

        <root level="${LOG_LEVEL}">
            <appender-ref ref="ASYNC_FILE"/>
            <appender-ref ref="ERROR_FILE"/>
            <appender-ref ref="CLOUDWATCH_ERROR_PROD"/>
            <appender-ref ref="CLOUDWATCH_INFO_PROD"/>
            <appender-ref ref="CLOUDWATCH_APPLICATION_PROD"/>
        </root>
    </springProfile>

    <!-- 패턴 정의 -->
    <property name="CONSOLE_PATTERN" 
              value="%d{HH:mm:ss.SSS} [%thread] %highlight(%-5level) %cyan(%logger{36}) - %msg%n"/>
    
    <!-- JSON 패턴 (CloudWatch용) -->
    <property name="JSON_PATTERN" 
              value='{"timestamp":"%d{ISO8601}","level":"%level","thread":"%thread","logger":"%logger","message":"%message","trace_id":"%X{traceId:-}","user_id":"%X{userId:-}"}%n'/>

    <property name="LOG_LEVEL" value="${logging.level.root:-INFO}"/>
    <property name="LOG_PATH" value="${logging.file.path:-logs}"/>

    <!-- 콘솔 Appender (개발용) -->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>${CONSOLE_PATTERN}</pattern>
        </encoder>
    </appender>

    <!-- 파일 Appender (일반 로그) -->
    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_PATH}/application.log</file>
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n</pattern>
        </encoder>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_PATH}/application.%d{yyyy-MM-dd}.log</fileNamePattern>
            <maxHistory>30</maxHistory>
            <totalSizeCap>3GB</totalSizeCap>
        </rollingPolicy>
    </appender>

    <!-- 감사 로그 전용 Appender -->
    <appender name="AUDIT_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_PATH}/audit/audit.log</file>
        <encoder class="net.logstash.logback.encoder.LogstashEncoder">
            <!-- JSON 형태로 구조화된 로그 -->
        </encoder>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_PATH}/audit/audit.%d{yyyy-MM-dd}.log</fileNamePattern>
            <maxHistory>90</maxHistory>
        </rollingPolicy>
    </appender>

    <!-- 에러 로그 전용 Appender -->
    <appender name="ERROR_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_PATH}/error.log</file>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n%ex</pattern>
        </encoder>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_PATH}/error.%d{yyyy-MM-dd}.log</fileNamePattern>
            <maxHistory>90</maxHistory>
        </rollingPolicy>
    </appender>



    <!-- CloudWatch Appender (Test/Prod 환경) -->
    
    <!-- Test 환경: 각 로그 레벨별로 별도 CloudWatch 로그 그룹으로 전송 -->
    <springProfile name="test">
        <!-- 감사 로그 전용 CloudWatch Appender -->
        <appender name="CLOUDWATCH_AUDIT_TEST" class="ca.pjer.logback.AwsLogsAppender">
            <layout>
                <pattern>${JSON_PATTERN}</pattern>
            </layout>
            <!-- Parameter Store: /tacohub/test/cloudwatch/log-group/audit -->
            <logGroupName>${cloudwatch.log-group.audit:-/aws/tacohub/test/audit}</logGroupName>
            <logStreamUuidPrefix>test-audit-</logStreamUuidPrefix>
            <logRegion>${AWS_REGION:-ap-northeast-2}</logRegion>
            <!-- Parameter Store: /tacohub/test/cloudwatch/batch-size/audit -->
            <maxBatchLogEvents>${cloudwatch.batch-size.audit:-200}</maxBatchLogEvents>
            <!-- Parameter Store: /tacohub/test/cloudwatch/flush-time/audit -->
            <maxFlushTimeMillis>${cloudwatch.flush-time.audit:-10000}</maxFlushTimeMillis>
            <!-- Parameter Store: /tacohub/test/cloudwatch/block-time/audit -->
            <maxBlockTimeMillis>${cloudwatch.block-time.audit:-2000}</maxBlockTimeMillis>
        </appender>
        
        <!-- ERROR 전용 CloudWatch Appender -->
        <appender name="CLOUDWATCH_ERROR_TEST" class="ca.pjer.logback.AwsLogsAppender">
            <layout>
                <pattern>${JSON_PATTERN}</pattern>
            </layout>
            <!-- Parameter Store: /tacohub/test/cloudwatch/log-group/error -->
            <logGroupName>${cloudwatch.log-group.error:-/aws/tacohub/test/error}</logGroupName>
            <logStreamUuidPrefix>test-error-</logStreamUuidPrefix>
            <logRegion>${AWS_REGION:-ap-northeast-2}</logRegion>
            <!-- Parameter Store: /tacohub/test/cloudwatch/batch-size/error -->
            <maxBatchLogEvents>${cloudwatch.batch-size.error:-50}</maxBatchLogEvents>
            <!-- Parameter Store: /tacohub/test/cloudwatch/flush-time/error -->
            <maxFlushTimeMillis>${cloudwatch.flush-time.error:-5000}</maxFlushTimeMillis>
            <!-- Parameter Store: /tacohub/test/cloudwatch/block-time/error -->
            <maxBlockTimeMillis>${cloudwatch.block-time.error:-1000}</maxBlockTimeMillis>
            
            <!-- ERROR 레벨만 필터링 -->
            <filter class="ch.qos.logback.classic.filter.LevelFilter">
                <level>ERROR</level>
                <onMatch>ACCEPT</onMatch>
                <onMismatch>DENY</onMismatch>
            </filter>
        </appender>
        
        <!-- INFO/WARN 전용 CloudWatch Appender -->
        <appender name="CLOUDWATCH_INFO_TEST" class="ca.pjer.logback.AwsLogsAppender">
            <layout>
                <pattern>${JSON_PATTERN}</pattern>
            </layout>
            <!-- Parameter Store: /tacohub/test/cloudwatch/log-group/info -->
            <logGroupName>${cloudwatch.log-group.info:-/aws/tacohub/test/info}</logGroupName>
            <logStreamUuidPrefix>test-info-</logStreamUuidPrefix>
            <logRegion>${AWS_REGION:-ap-northeast-2}</logRegion>
            <!-- Parameter Store: /tacohub/test/cloudwatch/batch-size/info -->
            <maxBatchLogEvents>${cloudwatch.batch-size.info:-200}</maxBatchLogEvents>
            <!-- Parameter Store: /tacohub/test/cloudwatch/flush-time/info -->
            <maxFlushTimeMillis>${cloudwatch.flush-time.info:-15000}</maxFlushTimeMillis>
            <!-- Parameter Store: /tacohub/test/cloudwatch/block-time/info -->
            <maxBlockTimeMillis>${cloudwatch.block-time.info:-2000}</maxBlockTimeMillis>
            
            <!-- INFO, WARN 레벨만 필터링 (ERROR는 제외) -->
            <filter class="ch.qos.logback.classic.filter.LevelFilter">
                <level>ERROR</level>
                <onMatch>DENY</onMatch>
                <onMismatch>NEUTRAL</onMismatch>
            </filter>
            <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
                <level>INFO</level>
            </filter>
        </appender>
        
        <!-- Application 전체 로그 CloudWatch Appender (백업용) -->
        <appender name="CLOUDWATCH_APPLICATION_TEST" class="ca.pjer.logback.AwsLogsAppender">
            <layout>
                <pattern>${JSON_PATTERN}</pattern>
            </layout>
            <!-- Parameter Store: /tacohub/test/cloudwatch/log-group/application -->
            <logGroupName>${cloudwatch.log-group.application:-/aws/tacohub/test/application}</logGroupName>
            <logStreamUuidPrefix>test-app-</logStreamUuidPrefix>
            <logRegion>${AWS_REGION:-ap-northeast-2}</logRegion>
            <!-- Parameter Store: /tacohub/test/cloudwatch/batch-size/application -->
            <maxBatchLogEvents>${cloudwatch.batch-size.application:-300}</maxBatchLogEvents>
            <!-- Parameter Store: /tacohub/test/cloudwatch/flush-time/application -->
            <maxFlushTimeMillis>${cloudwatch.flush-time.application:-20000}</maxFlushTimeMillis>
            <!-- Parameter Store: /tacohub/test/cloudwatch/block-time/application -->
            <maxBlockTimeMillis>${cloudwatch.block-time.application:-3000}</maxBlockTimeMillis>
        </appender>
    </springProfile>
    
    <!-- Prod 환경: 각 로그 레벨별로 별도 CloudWatch 로그 그룹으로 전송 -->
    <springProfile name="prod">
        <!-- 감사 로그 전용 CloudWatch Appender -->
        <appender name="CLOUDWATCH_AUDIT_PROD" class="ca.pjer.logback.AwsLogsAppender">
            <layout>
                <pattern>${JSON_PATTERN}</pattern>
            </layout>
            <!-- Parameter Store: /tacohub/prod/cloudwatch/log-group/audit -->
            <logGroupName>${cloudwatch.log-group.audit:-/aws/tacohub/prod/audit}</logGroupName>
            <logStreamUuidPrefix>prod-audit-</logStreamUuidPrefix>
            <logRegion>${AWS_REGION:-ap-northeast-2}</logRegion>
            <!-- Parameter Store: /tacohub/prod/cloudwatch/batch-size/audit -->
            <maxBatchLogEvents>${cloudwatch.batch-size.audit:-500}</maxBatchLogEvents>
            <!-- Parameter Store: /tacohub/prod/cloudwatch/flush-time/audit -->
            <maxFlushTimeMillis>${cloudwatch.flush-time.audit:-15000}</maxFlushTimeMillis>
            <!-- Parameter Store: /tacohub/prod/cloudwatch/block-time/audit -->
            <maxBlockTimeMillis>${cloudwatch.block-time.audit:-3000}</maxBlockTimeMillis>
        </appender>
        
        <!-- ERROR 전용 CloudWatch Appender -->
        <appender name="CLOUDWATCH_ERROR_PROD" class="ca.pjer.logback.AwsLogsAppender">
            <layout>
                <pattern>${JSON_PATTERN}</pattern>
            </layout>
            <!-- Parameter Store: /tacohub/prod/cloudwatch/log-group/error -->
            <logGroupName>${cloudwatch.log-group.error:-/aws/tacohub/prod/error}</logGroupName>
            <logStreamUuidPrefix>prod-error-</logStreamUuidPrefix>
            <logRegion>${AWS_REGION:-ap-northeast-2}</logRegion>
            <!-- Parameter Store: /tacohub/prod/cloudwatch/batch-size/error -->
            <maxBatchLogEvents>${cloudwatch.batch-size.error:-100}</maxBatchLogEvents>
            <!-- Parameter Store: /tacohub/prod/cloudwatch/flush-time/error -->
            <maxFlushTimeMillis>${cloudwatch.flush-time.error:-5000}</maxFlushTimeMillis>
            <!-- Parameter Store: /tacohub/prod/cloudwatch/block-time/error -->
            <maxBlockTimeMillis>${cloudwatch.block-time.error:-1000}</maxBlockTimeMillis>
            
            <!-- ERROR 레벨만 필터링 -->
            <filter class="ch.qos.logback.classic.filter.LevelFilter">
                <level>ERROR</level>
                <onMatch>ACCEPT</onMatch>
                <onMismatch>DENY</onMismatch>
            </filter>
        </appender>
        
        <!-- INFO/WARN 전용 CloudWatch Appender -->
        <appender name="CLOUDWATCH_INFO_PROD" class="ca.pjer.logback.AwsLogsAppender">
            <layout>
                <pattern>${JSON_PATTERN}</pattern>
            </layout>
            <!-- Parameter Store: /tacohub/prod/cloudwatch/log-group/info -->
            <logGroupName>${cloudwatch.log-group.info:-/aws/tacohub/prod/info}</logGroupName>
            <logStreamUuidPrefix>prod-info-</logStreamUuidPrefix>
            <logRegion>${AWS_REGION:-ap-northeast-2}</logRegion>
            <!-- Parameter Store: /tacohub/prod/cloudwatch/batch-size/info -->
            <maxBatchLogEvents>${cloudwatch.batch-size.info:-500}</maxBatchLogEvents>
            <!-- Parameter Store: /tacohub/prod/cloudwatch/flush-time/info -->
            <maxFlushTimeMillis>${cloudwatch.flush-time.info:-30000}</maxFlushTimeMillis>
            <!-- Parameter Store: /tacohub/prod/cloudwatch/block-time/info -->
            <maxBlockTimeMillis>${cloudwatch.block-time.info:-5000}</maxBlockTimeMillis>
            
            <!-- INFO, WARN 레벨만 필터링 (ERROR는 제외) -->
            <filter class="ch.qos.logback.classic.filter.LevelFilter">
                <level>ERROR</level>
                <onMatch>DENY</onMatch>
                <onMismatch>NEUTRAL</onMismatch>
            </filter>
            <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
                <level>INFO</level>
            </filter>
        </appender>
        
        <!-- Application 전체 로그 CloudWatch Appender (백업용) -->
        <appender name="CLOUDWATCH_APPLICATION_PROD" class="ca.pjer.logback.AwsLogsAppender">
            <layout>
                <pattern>${JSON_PATTERN}</pattern>
            </layout>
            <!-- Parameter Store: /tacohub/prod/cloudwatch/log-group/application -->
            <logGroupName>${cloudwatch.log-group.application:-/aws/tacohub/prod/application}</logGroupName>
            <logStreamUuidPrefix>prod-app-</logStreamUuidPrefix>
            <logRegion>${AWS_REGION:-ap-northeast-2}</logRegion>
            <!-- Parameter Store: /tacohub/prod/cloudwatch/batch-size/application -->
            <maxBatchLogEvents>${cloudwatch.batch-size.application:-500}</maxBatchLogEvents>
            <!-- Parameter Store: /tacohub/prod/cloudwatch/flush-time/application -->
            <maxFlushTimeMillis>${cloudwatch.flush-time.application:-30000}</maxFlushTimeMillis>
            <!-- Parameter Store: /tacohub/prod/cloudwatch/block-time/application -->
            <maxBlockTimeMillis>${cloudwatch.block-time.application:-5000}</maxBlockTimeMillis>
        </appender>
    </springProfile>

    <!-- 비동기 Appender (성능 최적화) -->
    <appender name="ASYNC_FILE" class="ch.qos.logback.classic.AsyncAppender">
        <appender-ref ref="FILE"/>
        <queueSize>256</queueSize>
        <discardingThreshold>0</discardingThreshold>
        <includeCallerData>false</includeCallerData>
    </appender>

    <appender name="ASYNC_AUDIT" class="ch.qos.logback.classic.AsyncAppender">
        <appender-ref ref="AUDIT_FILE"/>
        <queueSize>256</queueSize>
        <discardingThreshold>0</discardingThreshold>
    </appender>







    <!-- AOP 로깅 -->
    <logger name="com.example.TacoHub.Logging" level="DEBUG"/>
    
    <!-- Spring 관련 로그 레벨 조정 -->
    <logger name="org.springframework" level="INFO"/>
    <logger name="org.springframework.security" level="INFO"/>
    <logger name="org.springframework.web" level="INFO"/>
    
    <!-- 데이터베이스 관련 (개발환경만) -->
    <springProfile name="local,test">
        <logger name="org.hibernate.SQL" level="DEBUG"/>
        <logger name="org.hibernate.type.descriptor.sql.BasicBinder" level="TRACE"/>
    </springProfile>



</configuration>
